{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "75b97e47-c8ac-4387-9fa4-205ac0880bdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "import pandas as pd\n",
    "import cv2\n",
    "from PIL import Image, ImageTk\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "\n",
    "class PlotWindow:\n",
    "    def __init__(self, parent, fr, neuron_df, video_path):\n",
    "        self.parent = parent\n",
    "        self.fr = fr\n",
    "        self.neuron_df = neuron_df\n",
    "        self.neuron_time_df = self.df_time()\n",
    "        self.cap = cv2.VideoCapture(video_path)\n",
    "        self.frame_num = 0\n",
    "        \n",
    "        self.slider_label = tk.Label(master=self.parent, text=\"Frame:\")\n",
    "        self.slider_label.pack(anchor = tk.NW)\n",
    "        self.slider = tk.Scale(master=self.parent, from_=0, to=len(self.neuron_df)-1, orient=tk.HORIZONTAL)\n",
    "        self.slider.pack(anchor = tk.NW, expand = True, fill = 'x')\n",
    "        \n",
    "        self.fig = self.init_plot()\n",
    "        self.waveform_panel= FigureCanvasTkAgg(self.fig, master = self.parent)\n",
    "        self.waveform_panel.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH)\n",
    "        \n",
    "        self.video_panel = tk.Label(master=self.parent)\n",
    "        self.video_panel.pack(side=tk.RIGHT)\n",
    "        self.update_frame(None)\n",
    "        self.slider.bind(\"<ButtonRelease-1>\", self.update_frame)\n",
    "        \n",
    "    def init_plot(self):\n",
    "        self.fig, self.ax = plt.subplots(len(self.neuron_df.columns), 1, sharex = True)\n",
    "        self.fig.supylabel('Neuron #')\n",
    "        self.fig.supxlabel('Frame #')\n",
    "        colors = plt.rcParams[\"axes.prop_cycle\"]()\n",
    "        for i, col in enumerate(self.neuron_df.columns):\n",
    "            waveform = self.neuron_df[col].to_numpy()\n",
    "            waveform = waveform / max(abs(waveform))\n",
    "            c = next(colors)[\"color\"]\n",
    "            self.ax[i].plot(waveform, color = c)\n",
    "            self.ax[i].set(ylabel = i +1)\n",
    "            self.ax[i].axvline(x = 0, color = 'magenta')\n",
    "            self.ax[i].set_yticklabels([])\n",
    "            self.ax[i].spines['top'].set_color(None)\n",
    "            self.ax[i].spines['bottom'].set_color(None)\n",
    "            self.ax[i].spines['left'].set_color(None)\n",
    "            self.ax[i].spines['right'].set_color(None)\n",
    "            self.ax[i].set_yticks([])\n",
    "        return self.fig\n",
    "    \n",
    "    def df_time(self):\n",
    "        pd.TimedeltaIndex(self.neuron_df.index * (1/self.fr), unit = 's')\n",
    "        self.neuron_time_df = self.neuron_df.copy()\n",
    "        self.neuron_time_df.index = pd.TimedeltaIndex(self.neuron_df.index * (1/self.fr), unit = 's')\n",
    "        return self.neuron_time_df\n",
    "        \n",
    "    def update_frame(self, Event):\n",
    "        [self.ax[i].lines.pop(1) for i in range(len(self.ax))]\n",
    "        for i, col in enumerate(self.neuron_df.columns):\n",
    "            self.ax[i].axvline(x = int(self.slider.get()), color = 'magenta')\n",
    "        self.waveform_panel.draw()\n",
    "        \n",
    "        # Get current frame number from slider\n",
    "        self.frame_num = int(self.slider.get())\n",
    "        \n",
    "        # Get corresponding time stamp from dataframe, using the time dataframe\n",
    "        self.time_stamp = self.neuron_time_df.index[self.frame_num]\n",
    "        self.time_stamp = int(self.time_stamp.total_seconds() * 1000)\n",
    "        \n",
    "        # Set video capture position to corresponding time stamp\n",
    "        self.cap.set(cv2.CAP_PROP_POS_MSEC, self.time_stamp)\n",
    "        \n",
    "        # Read frame from video\n",
    "        self.ret, self.frame = self.cap.read()\n",
    "        \n",
    "        # Convert BGR to RGB color space\n",
    "        self.frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "        # Update video panel with new frame\n",
    "        self.img = cv2.resize(self.frame, (640, 480))\n",
    "        self.img = Image.fromarray(self.img)\n",
    "        self.img = ImageTk.PhotoImage(image=self.img)\n",
    "        self.video_panel.img = self.img\n",
    "        self.video_panel.config(image=self.img)\n",
    "        \n",
    "# your filepath to video will be different\n",
    "# root = tk.Tk()\n",
    "# plot_win = PlotWindow(root, 20.016, df, '/filepath/tomp4.mp4')\n",
    "# root.mainloop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
